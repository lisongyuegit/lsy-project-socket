<?xml version="1.0" encoding="UTF-8"?>

<!-- 
	说明：
	1、日志级别及文件
		日志记录采用分级记录，级别与日志文件名相对应，不同级别的日志信息记录到不同的日志文件中
		例如：error级别记录到log_error_xxx.log或log_error.log（该文件为当前记录的日志文件），而log_error_xxx.log为归档日志，
		日志文件按日期记录，同一天内，若日志文件大小等于或大于2M，则按0、1、2...顺序分别命名
		例如log-level-2013-12-21.0.log
		其它级别的日志也是如此。
	2、文件路径
		若开发、测试用，在Eclipse中运行项目，则到Eclipse的安装路径查找logs文件夹，以相对路径../logs。
		若部署到Tomcat下，则在Tomcat下的logs文件中
	3、Appender
		FILEERROR对应error级别，文件名以log-error-xxx.log形式命名
		FILEWARN对应warn级别，文件名以log-warn-xxx.log形式命名
		FILEINFO对应info级别，文件名以log-info-xxx.log形式命名
		FILEDEBUG对应debug级别，文件名以log-debug-xxx.log形式命名
		stdout将日志信息输出到控制上，为方便开发测试使用
 -->
<configuration>

    <!-- 在Eclipse中运行，请到Eclipse的安装目录中找log文件，Tomcat下，请到Tomcat目录下找 -->
    <property name="LOG_PATH" value="/home/logs/escloud-collect-socked" />

    <!-- 日志记录器，日期滚动记录 -->
    <appender name="FILEERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文件的路径及文件名 -->
        <file>${LOG_PATH}/log_error.log</file>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 归档的日志文件的路径，例如今天是2013-12-21日志，当前写的日志文件路径为file节点指定，可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。
            而2013-12-21的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引 -->
            <fileNamePattern>${LOG_PATH}/log-error-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!-- 除按日志记录之外，还配置了日志文件不能超过2M，若超过2M，日志文件会以索引0开始，
            命名日志文件，例如log-error-2013-12-21.0.log -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>20MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <!-- 追加方式记录日志 -->
        <append>true</append>
        <!-- 日志文件的格式 -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%-5p [%d] %C:%L - %m %n</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!-- 此日志文件只记录error级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>error</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <appender name="FILEWARN" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/log_warn.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/log-warn-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>20MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <append>true</append>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%-5p [%d] %C:%L - %m %n</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!-- 此日志文件只记录warn级别，不记录大于warn级别的日志 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>WARN</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <appender name="FILEINFO" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/log_info.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/log-info-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>20MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <append>true</append>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%-5p [%d] %C:%L - %m %n</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!-- 此日志文件只记录info级别，不记录大于info级别的日志 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <appender name="FILEDEBUG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/log_debug.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/log-debug-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>20MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <append>true</append>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%-5p [%d] %C:%L - %m %n</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!-- 此日志文件只记录debug级别，不记录大于debug级别的日志 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
        <Target>System.out</Target>
        <encoder>
            <pattern>%-5p [%d] %C:%L - %m %n</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!-- 此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
    </appender>
    
    <!--  
    	日志异步记录输出,可加快程序的主流程处理速度，提高接口的qps
    	异步log片段必须在同步段后面，否则不起作用 
    	discardingThreshold:int类型.默认情况下，当BlockingQueue还有20%容量，他将丢弃TRACE、DEBUG和INFO级别的event，只保留WARN和ERROR级别的event。为了保持所有的events，设置该值为0。
    	queueSize:更改默认的队列的深度,该值会影响性能.默认值为256
    	appender-ref:最多只能添加一个 
    -->  
	<appender name="ASYNC_INFO" class="ch.qos.logback.classic.AsyncAppender">  
	    <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->  
	    <discardingThreshold>0</discardingThreshold>  
	    <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->  
	    <queueSize>512</queueSize>  
	    <!-- 添加附加的appender,最多只能添加一个 -->  
	    <appender-ref ref="FILEINFO"/>  
	</appender> 
	<appender name="ASYNC_DEBUG" class="ch.qos.logback.classic.AsyncAppender">  
	    <discardingThreshold>0</discardingThreshold>  
	    <queueSize>512</queueSize>  
	    <appender-ref ref="FILEDEBUG"/>  
	</appender> 
	<appender name="ASYNC_ERROR" class="ch.qos.logback.classic.AsyncAppender">  
	    <discardingThreshold>0</discardingThreshold>  
	    <queueSize>512</queueSize>  
	    <appender-ref ref="FILEERROR"/>  
	</appender>  
	
    <!--
		以下为日志的过滤设置
		当启用了不同的logger，可以根据logger的name，进行特定的设置（输出或不输出，以及输出到哪个appender）
	    name：指定对哪个java包进行过滤
	    level：指定输出那个级别的日志，包括off/debug/info/warn/error/all
	    additivity: 过滤完成后，是否还需要向root传递，以进一步处理。false表示不处理，true表示向root传递
	    root的定义见配置文件的末尾
	    appender-ref：表示用哪个appender来进行输出。如果需要多个，则定义多个appender-ref
    -->
    <!-- 为单独的包配置日志级别，若root的级别大于此级别， 此处级别也会输出
        应用场景：生产环境一般不会将日志级别设置为trace或debug，但是为详细的记录SQL语句的情况，
        可将hibernate的级别设置为debug，如此一来，日志文件中就会出现hibernate的debug级别日志，
        而其它包则会按root的级别输出日志
    -->
    <logger name="org.springframework" level="DEBUG"/>
    
	<!-- rabbitmq 日志 -->
	<logger name="net.edenep.rabbitmq.client" level="info" additivity="false">
		<appender-ref ref="console" />
	</logger>
	
    <!-- 生产环境，将此级别配置为适合的级别，以名日志文件太多或影响程序性能 -->
    <root level="INFO">
        <appender-ref ref="FILEWARN" />
        <!-- 生产环境将请stdout去掉 -->
        <appender-ref ref="stdout" />
    	<appender-ref ref="ASYNC_INFO" />
    	<appender-ref ref="ASYNC_DEBUG" />
    	<appender-ref ref="ASYNC_ERROR" />
    </root>
</configuration>
